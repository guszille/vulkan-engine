#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout (rgba8, set = 0, binding = 0) uniform image2D image;

layout (push_constant) uniform constants
{
	vec4 data1;
	vec4 data2;
	vec4 data3;
	vec4 data4;
} pushConstants;

// Return random noise in the range [0.0, 1.0], as a function of x.
float noise2d(in vec2 x)
{
	float xHash = cos(x.x * 37.0);
	float yHash = cos(x.y * 57.0);

	return fract(415.92653 * (xHash + yHash));
}

// Convert noise2d() into a "star field" by stomping everthing below fThreshhold to zero.
float noisyStarField(in vec2 vSamplePos, float fThreshhold)
{
	float starValue = noise2d(vSamplePos);

	if (starValue >= fThreshhold)
	{
		starValue = pow((starValue - fThreshhold) / (1.0 - fThreshhold), 6.0);
	}
	else
	{
		starValue = 0.0;
	}

	return starValue;
}

// Stabilize noisyStarField() by only sampling at integer values.
float stableStarField(in vec2 vSamplePos, float fThreshhold)
{
	// Linear interpolation between four samples.
	// Note: This approach has some visual artifacts. There must be a better way to "anti alias" the star field.
	//
	float fractX = fract(vSamplePos.x);
	float fractY = fract(vSamplePos.y);

	vec2 floorSample = floor(vSamplePos);  
	
	float v1 = noisyStarField(floorSample, fThreshhold);
	float v2 = noisyStarField(floorSample + vec2(0.0, 1.0), fThreshhold);
	float v3 = noisyStarField(floorSample + vec2(1.0, 0.0), fThreshhold);
	float v4 = noisyStarField(floorSample + vec2(1.0, 1.0), fThreshhold);

	float starValue = v1 * (1.0 - fractX) * (1.0 - fractY)
					+ v2 * (1.0 - fractX) * fractY
					+ v3 * fractX * (1.0 - fractY)
					+ v4 * fractX * fractY;

	return starValue;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
	vec2 iResolution = imageSize(image);
	vec2 vRate = vec2(0.2, -0.06);
	vec2 vSamplePos = fragCoord.xy + vRate;
	vec3 vColor = pushConstants.data1.xyz * fragCoord.y / iResolution.y; // Sky background color.

	// Note: Choose fThreshhold in the range [0.99, 0.9999]. Higher values (i.e., closer to one) yield a sparser starfield.
	float starFieldThreshhold = pushConstants.data1.w; // 0.97;
	float starValue = stableStarField(vSamplePos, starFieldThreshhold);

	vColor += vec3(starValue);
	
	fragColor = vec4(vColor, 1.0);
}

void main() 
{
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(image);

	if (texelCoord.x < size.x && texelCoord.y < size.y)
	{
		vec4 color;
		mainImage(color, texelCoord);
		
		imageStore(image, texelCoord, color);
	}
}
